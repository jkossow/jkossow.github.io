{"version":3,"sources":["NewComponent.js","Component1.js","App.js","serviceWorker.js","index.js"],"names":["NewComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","count","st","newCount","setState","react_default","a","createElement","className","onClick","onButtonClick","bind","onResetClick","React","Component","Component1","props","App","src_NewComponent","src_Component1","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAkCgBA,qBA7BZ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,KAAM,eAAgBC,MAAO,GAC5CT,EAAKU,GAAO,EAHFV,+EAOVG,KAAKO,KACLP,KAAKQ,SAAWR,KAAKI,MAAME,MAAQ,EACnCN,KAAKS,SAAU,CAAEJ,KAAM,UAAWC,MAAON,KAAKQ,kDAK9CR,KAAKS,SAAU,CAAEJ,KAAM,eAAgBC,MAAO,qCAI9C,OACII,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAIZ,KAAKI,MAAMC,KAAOL,KAAKI,MAAME,OACjCI,EAAAC,EAAAC,cAAA,UAAQE,QAASd,KAAKe,cAAcC,KAAKhB,OAAzC,SACAU,EAAAC,EAAAC,cAAA,UAAQE,QAASd,KAAKiB,aAAaD,KAAKhB,OAAxC,iBAxBWkB,IAAMC,YCclBC,mLAPH,OAAOV,EAAAC,EAAAC,cAAA,UAAKZ,KAAKqB,MAAMhB,aANVa,IAAMC,WCuBhBG,mLAfX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACW,EAAD,OAGFb,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACW,EAAD,MACEb,EAAAC,EAAAC,cAACY,EAAD,CAAYnB,KAAK,OACjBK,EAAAC,EAAAC,cAACY,EAAD,CAAYnB,KAAK,kBAXTc,aCAEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.112c2929.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass NewComponent extends React.Component {\n\n    constructor() {\n        super();\n        this.state = { text: 'Not clicked!', count: 1 };\n        this.st  =  1;\n    }\n\n    onButtonClick() {\n        this.st++;\n        this.newCount = this.state.count + 1;\n        this.setState( { text: \"Clicked\", count: this.newCount });\n    }\n\n\n    onResetClick( ) {\n        this.setState( { text: 'Not clicked!', count: 1 })\n    }\n\n    render() {\n        return (\n            <div className=\"main\">\n                <p>{this.state.text + this.state.count}</p>\n                <button onClick={this.onButtonClick.bind(this)}>Click</button>\n                <button onClick={this.onResetClick.bind(this)}>Reset</button>\n\n            </div>\n        );\n    }\n};\n\nexport default  NewComponent;","\nimport React from 'react';\n\n\nclass Component1 extends React.Component {\n\n\n        render() {\n\n            //return React.createElement( 'h1', {id:'li1'}, this.props.text);\n            return <h3>{this.props.text}</h3>\n\n        }\n\n}\n\n\nexport default Component1;","import React, { Component } from 'react';\n\nimport './App.css';\n\n\nimport NewComponent from './NewComponent.js';\nimport Component1 from './Component1';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <NewComponent/>\n\n        </header>\n        <NewComponent/>\n        <NewComponent/>\n          <Component1 text=\"JK\"/>\n          <Component1 text='Hello'/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}